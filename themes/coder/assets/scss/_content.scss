.content {
  flex: 1;
  display: flex;
  margin-top: 1.6rem;
  margin-bottom: 3.2rem;
  article {
    header {
      margin-top: 6.4rem;
      margin-bottom: 3.2rem;
      h1 {
        font-size: 4.2rem;
        line-height: 4.6rem;
        margin: 0;
        @media only screen and (max-width : 768px) {
          font-size: 4.0rem;
          line-height: 4.4rem;
        }
      }
    }
    footer {
      margin-top: 4.0rem;
      .see-also {
        margin: 3.2rem 0;
        h3 {
          margin: 3.2rem 0;
        }
      }
    }
  }
  .post {
    .post-title {
      margin-bottom: .75em;
    }
    .post-meta {
      i {
        text-align: center;
        width: 1.6rem;
        margin-left: 0;
        margin-right: 0.5rem;
      }
      .date {
        font-family: $fancy-font-family;
        .posted-on {
          margin-left: 0;
          margin-right: 1.5rem;
        }
      }
    }
  }
  figure {
    margin: 0;
    padding: 0;
  }
  figcaption p {
    text-align: center;
    font-style: italic;
    font-size: 1.6rem;
    margin: 0;
  }
}

.avatar img{
  width: 50rem;
  height: auto;
  border-radius: 50%;
  @media only screen and (max-width : 768px) {
    width: 30rem;
  }
}

.list {
  ul {
    margin: 3.2rem 0 3.2rem 0;
    list-style: none;
    padding: 0;
    li {
      font-size: 1.8rem;
      @media only screen and (max-width : 768px) {
        margin: 1.6rem 0 1.6rem 0;
      }
      .date {
        font-family: $fancy-font-family;
        display: inline-block;
        width: 20.0rem;
        text-align: right;
        margin-right: 3.0rem;
        @media only screen and (max-width : 768px) {
          display: block;
          text-align: left;
        }
      }
      .title {
        font-size: 1.8rem;
        color: $fg-color;
        font-family: $heading-font-family;
        font-weight: 700;
        &:hover,
        &:focus {
          color: $link-color
        }
      }
    }
  }
}

.centered {
  display: flex;
  align-items: center;
  justify-content: center;
  .about {
    text-align: center;
    h1 {
        margin-top: 3rem;
        margin-bottom: 2.5rem;
        font-size: 4em;
        font-family: $thin-font-family;
        font-weight: 900;
        text-transform: uppercase;
        a {
            line-height: 4rem;
            text-transform:uppercase
        }
    }
    h2 {
      margin-top: 1.0rem;
      font-size: 1.8rem;
      @media only screen and (max-width : 768px) {
      }
    }
    ul {
      list-style: none;
      margin: 3.0rem 0 0rem 0;
      padding: 0;
      li {
        display: inline-block;
        position: relative;
        a {
          color: $fg-color;
          text-transform: uppercase;
          margin-left: 1.0rem;
          margin-right: 1.0rem;
          font-size: 1.6rem;
          &:hover,
          &:focus {
            color: $link-color;
          }
          @media only screen and (max-width : 768px) {
            font-size: 1.4rem;
          }
          i {
            font-size: 3.2rem;
          }
        }
      }
    }
  }

  .error {
    text-align: center;
    h1 {
      margin-top: 2.0rem;
      margin-bottom: 0.5rem;
      font-size: 4.6rem;
      @media only screen and (max-width : 768px) {
        font-size: 3.2rem;
      }
    }
    h2 {
      margin-top: 2.0rem;
      margin-bottom: 3.2rem;
      font-size: 3.2rem;
      @media only screen and (max-width : 768px) {
        font-size: 2.8rem;
      }
    }
  }
}

.centered .about h1 a:hover {
    color:$accentcolor;
    text-decoration:none;
}
.centered .about h1 a:after {
    display:block;
    content:'';
    border-bottom:1px solid $accentcolor;
    transform:scaleX(0);
    transition:transform .4s ease-in-out
}
.centered .about h1 a:hover:after {
    width: 100%;
    transform:scaleX(1);
}

/* Our mixin positions a copy of our text directly on our existing text, while also setting content to the appropriate text set in the data-text attribute. */
@mixin glitchCopy {
		content: attr(data-text);
        // line-height: 5rem;
        position: absolute;
		width: 100%;
		height: 100%;
}

@media only screen and (min-width : 768px) {
.glitch {
    position: relative;
	color: $lightcolor;
	animation: glitch-skew 1s infinite linear alternate-reverse;
	&::before{
		@include glitchCopy;
		left: 2px;
		text-shadow: -2px 0 $glitchone;
		clip: rect(44px, 450px, 56px, 0);
		animation: glitch-anim 5s infinite linear alternate-reverse;
	}

	&::after {
		@include glitchCopy;
		left: -2px;
		text-shadow: -2px 0 $glitchtwo, 2px 2px $glitchone;
		animation: glitch-anim2 1s infinite linear alternate-reverse;
	}
}

/* Creates an animation with 20 steaps. For each step, it calculates a percentage for the specific step. It then generates a random clip box to be used for the random glitch effect. Also adds a very subtle skew to change the 'thickness' of the glitch.*/
@keyframes glitch-anim {
  $steps: 50;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      clip: rect(random(100)+px, 9999px, random(100)+px, 0);
			transform: skew((random(100) / 100) + deg);
    }
  }
}

// Same deal, just duplicated for ultra randomness.
@keyframes glitch-anim2 {
  $steps: 20;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      clip: rect(random(100)+px, 9999px, random(100)+px, 0);
			transform: skew((random(100) / 100) + deg);
    }
  }
}

// Does the same deal as before, but now only skews. Used for main text.
@keyframes glitch-skew {
  $steps: 10;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      transform: skew((random(10) - 5) + deg);
    }
  }
}

.typewriter {
  overflow: hidden; /* Ensures the content is not revealed until the animation */
  border-right: .15em solid orange; /* The typwriter cursor */
  white-space: nowrap; /* Keeps the content on a single line */
  margin: 0 auto; /* Gives that scrolling effect as the typing happens */
  letter-spacing: .15em; /* Adjust as needed */
  animation: 
    typing 3.5s steps(40, end),
    blink-caret .75s step-end infinite;
}

/* The typing effect */
@keyframes typing {
  from { width: 0 }
  to { width: 100% }
}

/* The typewriter cursor effect */
@keyframes blink-caret {
  from, to { border-color: transparent }
  50% { border-color: $accentcolor; }
}
}

